def getFlavorProperties(flavor) {
    Properties properties = new Properties()
    properties.load(getFlavorConfigFile(flavor).newDataInputStream())
    return [
        version        : properties.getProperty("config.version"),
        api_key        : properties.getProperty("config.api_key"),
        base_url       : properties.getProperty("config.base_url"),
        socket_base_url: properties.getProperty("config.socket_base_url"),
    ]
}

def getBuildTypeProperties(buildType) {
    Properties properties = new Properties()
    properties.load(getBuildTypeConfigFile(buildType).newDataInputStream())
    return [
        key_alias   : properties.getProperty("config.key_alias"),
        iv          : properties.getProperty("config.iv"),
        redirect_url: properties.getProperty("config.redirect_url")
    ]
}

def getTestBuildTypeProperties(buildType) {
    Properties properties = new Properties()
    properties.load(getBuildTypeConfigFile(buildType).newDataInputStream())
    return [
        key_alias   : properties.getProperty("config.key_alias"),
        iv          : properties.getProperty("config.iv"),
        redirect_url: properties.getProperty("config.redirect_url"),
        test_user_email: properties.getProperty("config.user_email"),
        test_user_password: properties.getProperty("config.user_password"),
        test_tx_consumer_email: properties.getProperty("config.tx_consumer_user_email"),
        test_tx_consumer_password: properties.getProperty("config.tx_consumer_user_password"),
    ]
}

def getFlavorConfigFile(flavor) {
    def defaultFlavorConfigFile = file('config/flavor/coffeego.properties')
    switch (flavor) {
        case 'demo':
            return file('config/flavor/demo.properties')
        case 'coffeego':
            return file('config/flavor/coffeego.properties')
        case 'local':
            return file('config/flavor/local.properties')
        default:
            return defaultFlavorConfigFile
    }
}

def getBuildTypeConfigFile(buildType) {
    def defaultBuildTypeConfigFile = file('config/buildType/debug.properties')
    switch (buildType) {
        case 'debug':
            return file('config/buildType/debug.properties')
        case 'staging':
            return file('config/buildType/staging.properties')
        case 'release':
            return file('config/buildType/release.properties')
        default:
            return defaultBuildTypeConfigFile
    }
}

ext.getFlavorProperties = this.&getFlavorProperties
ext.getBuildTypeProperties = this.&getBuildTypeProperties
ext.getTestBuildTypeProperties = this.&getTestBuildTypeProperties
